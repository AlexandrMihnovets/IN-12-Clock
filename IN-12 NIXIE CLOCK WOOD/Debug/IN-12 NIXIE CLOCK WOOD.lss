
AVRASM ver. 2.2.8  D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm Fri Apr 28 13:56:52 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8def.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(12): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8def.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(29): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\vectors.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(31): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\macro.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(33): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\interrupts.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(35): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\procedures.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(60): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\flush.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(61): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\ini.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8def.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(12): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8def.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(29): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\vectors.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(31): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\macro.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(33): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\interrupts.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(35): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\procedures.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(60): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\flush.inc'
D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\main.asm(61): Including file 'D:\Документы\Atmel Studio\7.0\IN-12 NIXIE CLOCK WOOD\IN-12 NIXIE CLOCK WOOD\ini.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8.xml *************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8DEF_INC_
                                 #define _M8DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega8
                                 #pragma AVRPART ADMIN PART_NAME ATmega8
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x93
                                 .equ	SIGNATURE_002	= 0x07
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCL	= 0x04
                                 .equ	ADCH	= 0x05
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 
                                 ; TCCR0 - Timer/Counter0 Control Register
                                 .equ	CS00	= 0	; Clock Select0 bit 0
                                 .equ	CS01	= 1	; Clock Select0 bit 1
                                 .equ	CS02	= 2	; Clock Select0 bit 2
                                 
                                 ; TCNT0 - Timer Counter 0
                                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PUD	= 2	; Pull-up Disable
                                 .equ	ADHSM	= 4	; ADC High Speed Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	WTDON	= 6	; Enable watchdog
                                 .equ	RSTDISBL	= 7	; Disable reset
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 8192
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xc00
                                 .equ	NRWW_STOP_ADDR	= 0xfff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xbff
                                 .equ	PAGESIZE	= 32
                                 .equ	FIRSTBOOTSTART	= 0xf80
                                 .equ	SECONDBOOTSTART	= 0xf00
                                 .equ	THIRDBOOTSTART	= 0xe00
                                 .equ	FOURTHBOOTSTART	= 0xc00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                                 
                                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                                 
                                 #endif  /* _M8DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; IN-12 NIXIE CLOCK WOOD.asm
                                 ;
                                 ; Created: 21.03.2023 13:03:44
                                 ; Author : MikhnovetsA (Михновец Александр Владимирович, Россия, г.Челябинск)
                                 ; e-mail: sasha_mihnovets@mail.ru
                                 ; Программа для часов с газоразряжными индикаторами ИН-12 (6 штук) под управлением микроконтроллера ATmega8 
                                 ; и микросхемы часов реального времени DS1307.
                                 
                                 ; F_CPU = 8 MHz
                                 .device ATmega8
                                 .include "m8def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8.xml *************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8DEF_INC_
                                 #endif  /* _M8DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Дефайны и переменные =========================================================================================================
                                 .def temp			= r16		; Временная переменная 1
                                 .def temp1			= r17		; Временная переменная 2
                                 .def Razryad		= r19		; Для переключения индикаторов (значения от 0 до 5)
                                 .def Sec_counter	= r22		; Счётчик секунд
                                 .def Min_counter	= r23		; Счётчик минут
                                 .def Hour_counter	= r24		; Счётчик часов
                                 .equ T1 = 6						; Индикатор десятков часов
                                 .equ T2 = 7						; Индикатор единиц часов
                                 .equ T3 = 5						; Индикатор десятков минут
                                 .equ T4 = 6						; Индикатор единиц минут
                                 .equ T5 = 7						; Индикатор десятков секунд
                                 .equ T6 = 0						; Индикатор единиц секунд
                                 
                                 ; Таблица векторов прерываний ==================================================================================================
                                 .include "vectors.inc"
                                 
                                  * vectors.inc
                                  *
                                  *  Created: 21.03.2023 14:20:36
                                  *   Author: MikhnovetsA
                                  */ 
                                  .org $000
000000 c08f                      	rjmp Reset
                                 .org $001
000001 9518                      reti;	rjmp DS1307_SQW
                                 .org $003
000003 c010                      	rjmp TIMER2_COMPARE
                                 .org $004
000004 c02a                      	rjmp TIMER2_OVF
                                 .org $006 
000006 c055                      	rjmp TIMER1_COMPA
                                 .org $007
000007 c06d                      	rjmp TIMER1_COMPB
                                 .org $008 
000008 c06d                      	rjmp TIMER1_OVF
                                 .org $009 
000009 c06d                      	rjmp TIMER0_OVF
                                 .org $00e
00000e c069                      	rjmp ADC_READY
                                 .org $00f
00000f c069                      	rjmp EE_READY
                                 .org INT_VECTORS_SIZE
                                 ; Макросы ======================================================================================================================
                                 .include "macro.inc"
                                 
                                  * macro.inc
                                  *
                                  *  Created: 21.03.2023 14:18:59
                                  *   Author: MikhnovetsA
                                  */ 
                                 
                                  ; N = T * fтакт / (r + 2),
                                  ; где	r - кол-во регистров, каждый регистр - это ещё одна команда sbci.
                                 
                                  .macro Delay	; Задержка на пустых циклах
                                 		ldi Razr1, @0	; Старший байт задержки
                                 		ldi Razr0, @1	; Младший байт задержки
                                 	R_sub:
                                 		subi Razr0, 1	; Вычесть 1
                                 		sbci Razr1, 0	; Вычесть заём, если он появился
                                 	brcc R_sub
                                 ; Обработчики прерываний =======================================================================================================
                                 .include "interrupts.inc"
                                 
                                  * interrupts.inc
                                  *
                                  *  Created: 21.03.2023 14:17:43
                                  *   Author: MikhnovetsA
                                  */ 
                                 DS1307_SQW:	; Прерывание от импульса от микросхемы часов (раз в 1 секунду)
                                 	;inc SECONDS
                                 	;cpi
000013 9518                      reti
                                 ; ==========================================================================================================
                                 TIMER2_COMPARE:		; В прерывании по совпадению Таймера 2 происходит выключение индикатора,
                                 					; соответствующего номеру в переменной Razryad. 
                                 	; switch(Razryad)
                                 		; case(0):
000014 3030                      			cpi Razryad, 0		; При первом прерывании тут делать нечего, пока ни один индаикатор не горит
000015 f0c1                      			breq End_switch_2	; так что на выход
000016 3031                      			cpi Razryad, 1
000017 f411                      			brne case_11
000018 98c6                      			cbi PORTB, T1
000019 c014                      			rjmp End_switch_2
                                 
                                 		case_11:
00001a 3032                      			cpi Razryad, 2
00001b f411                      			brne case_21
00001c 98c7                      			cbi PORTB, T2
00001d c010                      			rjmp End_switch_2
                                 
                                 		case_21:
00001e 3033                      			cpi Razryad, 3
00001f f411                      			brne case_31
000020 9895                      			cbi PORTD, T3
000021 c00c                      			rjmp End_switch_2
                                 
                                 		case_31:
000022 3034                      			cpi Razryad, 4
000023 f411                      			brne case_41
000024 9896                      			cbi PORTD, T4
000025 c008                      			rjmp End_switch_2
                                 
                                 		case_41:
000026 3035                      			cpi Razryad, 5
000027 f411                      			brne case_51
000028 9897                      			cbi PORTD, T5
000029 c004                      			rjmp End_switch_2
                                 
                                 		case_51:
00002a 3036                      			cpi Razryad, 6
00002b f411                      			brne End_switch_2
00002c 98c0                      			cbi PORTB, T6
                                 
00002d 2733                      			clr Razryad		; Если номер разряда стал равен 6, обнуляем его
                                 	
                                 	End_switch_2:
                                 			
00002e 9518                      reti
                                 ; ==========================================================================================================
                                 TIMER2_OVF:			; При переполнении Таймера 2 происходит включение индикатора, соответствующего 
                                 					; переменной Razryad - 1 (0 - это Т1 и т.д.), выключаются индикаторы в прерывании
                                 					; по совпадению Таймера 2.
                                 
00002f e1e6                      	ldi ZL, low(Numbers*2)	; В Z адрес цифр во флэш памяти в порядке возрастания
000030 e0f1                      	ldi ZH, high(Numbers*2)	; каждый цикл обнуляется
                                 
                                 	Switch:			; switch(Razryad)
                                 		case_0:
000031 3030                      			cpi Razryad, 0
000032 f429                      			brne case_1
000033 9100 0067                 			lds temp, Hour_h_BCD
000035 d04b                      			rcall Find_num_in_flash_and_set_to_PORTC
000036 9ac6                      			sbi PORTB, T1		; Включаем первый индикатор (Т1)
000037 c022                      			rjmp End_switch
                                 
                                 		case_1:
000038 3031                      			cpi Razryad, 1
000039 f429                      			brne case_2
00003a 9100 0066                 			lds temp, Hour_l_BCD
00003c d044                      			rcall Find_num_in_flash_and_set_to_PORTC
00003d 9ac7                      			sbi PORTB, T2		; Включаем второй индикатор (Т2)
00003e c01b                      			rjmp End_switch
                                 
                                 		case_2:
00003f 3032                      			cpi Razryad, 2
000040 f429                      			brne case_3
000041 9100 0064                 			lds temp, Min_h_BCD
000043 d03d                      			rcall Find_num_in_flash_and_set_to_PORTC
000044 9a95                      			sbi PORTD, T3		; Включаем третий индикатор (Т3)
000045 c014                      			rjmp End_switch
                                 
                                 		case_3:
000046 3033                      			cpi Razryad, 3
000047 f429                      			brne case_4
000048 9100 0063                 			lds temp, Min_l_BCD
00004a d036                      			rcall Find_num_in_flash_and_set_to_PORTC
00004b 9a96                      			sbi PORTD, T4		; Включаем четвёртый индикатор (Т4)
00004c c00d                      			rjmp End_switch
                                 
                                 		case_4:
00004d 3034                      			cpi Razryad, 4
00004e f429                      			brne case_5
00004f 9100 0061                 			lds temp, Sec_h_BCD
000051 d02f                      			rcall Find_num_in_flash_and_set_to_PORTC
000052 9a97                      			sbi PORTD, T5		; Включаем пятый индикатор (Т5)
000053 c006                      			rjmp End_switch
                                 
                                 		case_5:
000054 3035                      			cpi Razryad, 5
000055 f421                      			brne End_switch
000056 9100 0060                 			lds temp, Sec_l_BCD
000058 d028                      			rcall Find_num_in_flash_and_set_to_PORTC
000059 9ac0                      			sbi PORTB, T6		; Включаем шестой индикатор (Т6)
                                 
                                 	End_switch:	
                                 		
00005a 9533                      		inc Razryad				; Переключили разряд
00005b 9518                      reti
                                 ; ==========================================================================================================
                                 TIMER1_COMPA:	; Таймер настроен на прерывание раз в секунду. Потом этот обработчик надо перенести в прерывание по Int0
                                 	; Инкрементируем секунды
00005c 9563                      	inc Sec_counter				; Через секунду прибавили 1 к секундам
00005d 336c                      	cpi Sec_counter, 60			; Проверка на переполнение секунд
00005e f489                      	brne Sec_exit				; Нет переполнения, минуты и часы не трогаем
                                 	; Инкрементируем минуты, если было переполнение секунд
00005f 2766                      	clr Sec_counter				; Обнуляем счётчик секунд
000060 9573                      	inc Min_counter				; Прибавили минуту
000061 337c                      	cpi Min_counter, 60			; Проверка на переполнение минут
000062 f449                      	brne Min_exit				; Нет переполнения, часы не трогаем
                                 	; Инкрементируем часы, если было переполнение минут
000063 2777                      	clr Min_counter				; Обнуляем счётчик минут
000064 9583                      	inc Hour_counter			; Прибавили часы
000065 3188                      	cpi Hour_counter, 24		; Проверка на переполнение часов
000066 f409                      	brne Hour_exit				; Если нет переполнеия, не обнуляем
000067 2788                      	clr Hour_counter			; ...иначе, обнуляем
                                 
                                 	Hour_exit:					; Преобразование HEX часов в BCD
000068 2f08                      	mov temp, Hour_counter		; Значение часов в temp
000069 d010                      	rcall bin2bcd8				; На выходе в temp1 десятки, в temp единицы часов
00006a e6c6                      	ldi YL, low(Hour_l_BCD)		; Адрес единиц часов в индекс
00006b d019                      	rcall Save_BCD_to_SRAM		; Сохраняем распакованные и упакованные BCD в ОЗУ
                                 
                                 	Min_exit:
00006c 2f07                      	mov temp, Min_counter		; Значение минут в temp
00006d d00c                      	rcall bin2bcd8				; На выходе в temp1 десятки, в temp единицы минут
00006e e6c3                      	ldi YL, low(Min_l_BCD)		; Адрес единиц минут в индекс
00006f d015                      	rcall Save_BCD_to_SRAM		; Сохраняем распакованные и упакованные BCD в ОЗУ
                                 
                                 	Sec_exit:
000070 2f06                      	mov temp, Sec_counter		; Значение секунд в temp
000071 d008                      	rcall bin2bcd8				; На выходе в temp1 десятки, в temp единицы минут
000072 e6c0                      	ldi YL, low(Sec_l_BCD)		; Адрес единиц секунд в индекс
000073 d011                      	rcall Save_BCD_to_SRAM		; Сохраняем распакованные и упакованные BCD в ОЗУ
                                 
000074 9518                      reti
                                 
                                 TIMER1_COMPB:
                                 
000075 9518                      reti
                                 
                                 TIMER1_OVF:
                                 
000076 9518                      reti
                                 
                                 TIMER0_OVF:
                                 
000077 9518                      reti
                                 
                                 ADC_READY:
                                 
000078 9518                      reti
                                 
                                 EE_READY:
                                 
000079 9518                      reti
                                 ; Процедуры ====================================================================================================================
                                 .include "procedures.inc"
                                 
                                  * procedures.inc
                                  *
                                  *  Created: 21.03.2023 14:20:09
                                  *   Author: MikhnovetsA
                                  */ 
                                 
                                  ; Перед вызовом процедуры необходимо в temp поместить искомое число от 0 до 99 в HEX формате
                                  ; На выходе будет в temp1 старший разряд, в temp младший. Оба в распакованном виде
                                  bin2bcd8:	; Процедура преобразования HEX значения в распакованный BCD формат
00007a 2711                      	clr temp1			; Старший BCD (десятки)
                                  bBCD8_1:
00007b 500a                      	subi temp, 10		; В temp значение часов. В цикле вычитаем 10, пока не вылезет заём. Тем самым считаем кол-во десятков
00007c f010                      	brcs bBCD8_2		; Если стало меньше нуля, заканчиваем
00007d 9513                      	inc temp1			; Если по прежнему больше нуля, прибавляем к temp1
00007e cffc                      	rjmp bBCD8_1
                                  bBCD8_2:
00007f 5f06                      	subi temp, -10		; Компенсируем переход через ноль, младший BCD (единицы)
000080 9508                       ret
                                  ; Чтобы получить в temp упакованный BCD, нужно сделать swap temp1
                                  ;														or temp, temp1. 
                                  ; Всё
                                 
                                 Find_num_in_flash_and_set_to_PORTC:
000081 0fe0                      	add ZL, temp
000082 9104                      	lpm temp, Z
000083 bb05                      	out PORTC, temp
000084 9508                      ret
                                 
                                 Save_BCD_to_SRAM:
000085 9309                      	st Y+, temp					; Сохраняем единицы секунд в ОЗУ
000086 9319                      	st Y+, temp1				; Сохраняем десятки секунд в ОЗУ
000087 9512                      	swap temp1					; Меняем местами тетрады, чтобы занять старшие биты в temp1
000088 2b01                      	or temp, temp1				; Склеиваем тетрады в упакованный BCD для секунд
000089 8308                      	st Y, temp					; Сохраняем в ОЗУ упакованные секунды
00008a 9508                      
                                 .DSEG ; Область оперативной памяти ОЗУ =========================================================================================
                                 				.org SRAM_START		; Начало оперативной памяти (за всеми регистрами ввода-вывода)
                                 	; Резервирование памяти для распакованных и упакованных значений времени
000060                           	Sec_l_BCD:	.byte	1			; Единицы секунд (low BCD)
000061                           	Sec_h_BCD:	.byte	1			; Десятки секунд (high BCD)
000062                           	Sec_pac:	.byte	1			; Секунды в упауованном BCD формате
000063                           	Min_l_BCD:	.byte	1			; Единицы минут (low BCD)
000064                           	Min_h_BCD:	.byte	1			; Десятки минут	(high BCD)
000065                           	Min_pac:	.byte	1			; Минуты в упакованном BCD формате
000066                           	Hour_l_BCD:	.byte	1			; Единицы часов (low BCD)
000067                           	Hour_h_BCD:	.byte	1			; Десятки часов (high BCD)
000068                           	Hour_pac:	.byte	1			; Часы в упакованном BCD формате
                                 
                                 .CSEG ; Область флэш памяти ПЗУ ================================================================================================
                                 
                                 Numbers:
                                 ; Массив цифр для дешифратора (не по порядку из-за дурацкой разводки)
                                 ;	0	 1	  2	   3	4	 5	  6	   7	8	 9
00008b 0100
00008c 0504
00008d 0908
00008e 0d0c
00008f 0302                      .db $00, $01, $04, $05, $08, $09, $0C, $0D, $02, $03
                                 
                                 ; Начало программы
                                 Reset:
                                 	
                                 	.include "flush.inc"; Очистка памяти от мусора
                                 
                                  * flush.inc
                                  *
                                  *  Created: 28.04.2023 12:36:06
                                  *   Author: MikhnovetsA
                                  */ 
                                 
                                  RAM_Flush:							; Очистка памяти от мусора	
000090 e6e0                      			LDI  ZL,Low(SRAM_START)		; Адрес начала ОЗУ в индекс 
000091 e0f0                      			LDI  ZH,High(SRAM_START) 
000092 2700                      			CLR  R16					; Очищаем R16 
                                 	Flush:    
000093 9301                      			ST   Z+,R16					; Сохраняем 0 в ячейку памяти 
000094 30f4                      			CPI  ZH,High(RAMEND+1)		; Достигли конца оперативки? 
000095 f7e9                      			BRNE  Flush					; Нет? Крутимся дальше! 
                                   
000096 36e0                      			CPI  ZL,Low(RAMEND+1)		; А младший байт достиг конца? 
000097 f7d9                      			BRNE  Flush 
                                   
000098 27ee                      			CLR  ZL						; Очищаем индекс 
000099 27ff                      			CLR  ZH
                                 
00009a e1ee                      			LDI  ZL, 30					; Адрес самого старшего регистра   
00009b 27ff                      			CLR  ZH						; А тут у нас будет ноль 
00009c 95ea                      			DEC  ZL						; Уменьшая адрес 
00009d 83f0                      			ST  Z, ZH					; Записываем в регистр 0 
                                 	.include "ini.inc"	; Инициализация стека, перифирии и т.д.
00009e f7e9                      
                                  * ini.inc
                                  *
                                  *  Created: 21.03.2023 14:21:50
                                  *   Author: MikhnovetsA
                                  */ 
                                 
                                  ; Инициализация стэка
00009f e004                       ldi temp, high(RAMEND)
0000a0 bf0e                       out SPH, temp
0000a1 e50f                       ldi temp, low(RAMEND)
0000a2 bf0d                       out SPL, temp
                                 
                                  ; Отключение компаратора
0000a3 e800                       ldi temp, (1<<ACD)
0000a4 b908                       out ACSR, temp
                                 
                                  ; Адреса в ОЗУ больше байта не испольщую, поэтому старшую регистровую пару Y навсегда приравниваю к нулю
0000a5 27dd                       clr YH					; На всякий случай. Большие адреса в ОЗУ не использую
                                 
                                  ; Настройка портов ввода-вывода
0000a6 ec01                       ldi temp, (1<<DDB7) | (1<<DDB6) | (1<<DDB0)	; T2, T1, T0 (единицы и десятки часов, единицы секунд соответственно)
0000a7 bb07                       out DDRB, temp
                                 
0000a8 ee03                       ldi temp, (1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD1) | (1<<DDD0)	; T5, T4, T3 (Десятки секунд, единицы и десятки минут соответственно)
0000a9 bb01                       out DDRD, temp															; SDA и SCL для инициализации DS1307, потом SDA будет меняться для чтения из DS1307
                                 
0000aa e00f                       ldi temp, (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0)	; A, D, B, C дешифратора (D -старший бит 4-хбитного значения)
0000ab bb04                       out DDRC, temp
                                 
                                  ; Настройка АЦП
                                 
                                  ; Настройка внешнего прерывания на INT0 от часов DS1307
0000ac e002                       ldi temp, (1<<ISC01)	; Прерывание по спаду
0000ad bf05                       out MCUCR, temp
0000ae e400                       ldi temp, (1<<INT0)	; на INT0
0000af bf0b                       out GICR, temp
                                 
                                  ; Настройка Таймера0
                                 
                                  ; Настройка Таймера1
0000b0 e70a                       ldi temp, high(31249)
0000b1 bd0b                       out OCR1AH, temp
0000b2 e101                       ldi temp, low(31249)
0000b3 bd0a                       out OCR1AL, temp	; Запись в регистр сравнения для прерывания раз в секунду
                                 
                                  ;ldi temp, (1<<OCIE1A)
                                  ;out TIMSK, temp	; В этот регистр писать в одном месте, иначе что-то сбросится
                                  
0000b4 e00c                       ldi temp, (1<<CS12) | (1<<WGM12)	; CS12 must be, CS10 for fast
0000b5 bd0e                       out TCCR1B, temp	; Предделитель 256 (частота на входе счётчика 62500), и сброс счётчика при совпадении
                                  
                                  ; Настройка Таймера2, он служит для динамического переключения индикаторов и регулировки их яркости
0000b6 e004                       ldi temp, (1<<CS22); Предделитель таймера 64. Тогда частота переключения 6 ламп составит 81 Гц
0000b7 bd05                       out TCCR2, temp
                                 
0000b8 2700                       clr temp
0000b9 bd04                       out TCNT2, temp	; Сброс счётного регистра
                                 
0000ba ef0f                       ldi temp, 255
0000bb bd03                       out OCR2, temp		; Установка регистра совпадения (максимальная яркость индикаторов)
                                 
0000bc ed00                       ldi temp, (1<<OCIE2) | (1<<TOIE2) | (1<<OCIE1A)	; Разрешение прерываний по совпадению и по переполнению Таймера2, и по совпадению А Таймера 1
0000bd bf09                      
                                 	; Установка времени (временная)
                                 	
0000be e378                      	ldi Min_counter, 56
0000bf 2f07                      	mov temp, Min_counter
0000c0 dfb9                      	rcall bin2bcd8				; На выходе в temp1 десятки, в temp единицы минут
0000c1 e6c3                      	ldi YL, low(Min_l_BCD)		; Адрес единиц минут в ОЗУ
0000c2 9309                      	st Y+, temp					; Сохраняем единицы минут в ОЗУ
0000c3 8318                      	st Y, temp1					; Сохраняем десятки минут в ОЗУ
                                 
0000c4 2711                      	clr temp1
                                 	
0000c5 e08d                      	ldi Hour_counter, 13
0000c6 2f08                      	mov temp, Hour_counter		; Значение часов в temp
0000c7 dfb2                      	rcall bin2bcd8				; На выходе в temp1 десятки, в temp единицы часов
0000c8 e6c6                      	ldi YL, low(Hour_l_BCD)		; Адрес единиц часов в ОЗУ
0000c9 9309                      	st Y+, temp					; Сохраняем единицы часов в ОЗУ
0000ca 8318                      	st Y, temp1					; Сохраняем десятки часов в ОЗУ
                                 
                                 
                                 	
0000cb 9478                          sei						; Разрешаю глобальные прерывания
                                 
                                 	LOOP:					; Основной цикл программы
                                 
                                 		
                                 	
0000cc cfff                          rjmp LOOP
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8" register use summary:
x  :   0 y  :   7 z  :   3 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  53 r17:   8 r18:   0 r19:  15 r20:   0 
r21:   0 r22:   4 r23:   6 r24:   6 r25:   0 r26:   0 r27:   0 r28:   5 
r29:   1 r30:   7 r31:   6 
Registers used: 12 out of 35 (34.3%)

"ATmega8" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   1 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   1 breq  :   1 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :  18 
brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 
cli   :   0 cln   :   0 clr   :  12 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   0 cpc   :   0 cpi   :  18 cpse  :   0 
dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   0 inc   :   5 ld    :   0 ldd   :   0 ldi   :  26 
lds   :   6 lpm   :   2 lsl   :   0 lsr   :   0 mov   :   5 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   0 out   :  16 pop   :   0 push  :   0 rcall :  14 ret   :   3 
reti  :  10 rjmp  :  21 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   6 sbic  :   0 sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   9 std   :   0 sts   :   0 sub   :   0 subi  :   2 swap  :   1 
tst   :   0 wdr   :   0 
Instructions used: 24 out of 110 (21.8%)

"ATmega8" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00019a    382     10    392    8192   4.8%
[.dseg] 0x000060 0x000069      0      9      9    1024   0.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
